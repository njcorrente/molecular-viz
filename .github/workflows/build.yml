name: Build Executables

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            runtime_hook: linux_runtime_hook.py
          - os: windows-latest
            runtime_hook: windows_rintime_hook.py
          - os: macos-latest
            runtime_hook: macos_runtime_hook.py

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        activate-environment: build-env
        python-version: '3.9'
        
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      shell: bash -l {0}
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install dependencies
      shell: bash -l {0}
      run: |
        conda install -c conda-forge numpy matplotlib pyinstaller
        python -m pip install -r requirements.txt

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: |
        pip install dmgbuild

    - name: Create dmg_settings.py for macOS
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: |
        echo 'from os.path import join
        import os

        application = defines.get("app", "dist/PyPairViz.app")
        appname = os.path.basename(application)

        format = defines.get("format", "UDBZ")
        size = defines.get("size", "100M")
        files = [application]
        symlinks = {"Applications": "/Applications"}

        icon_locations = {
            appname: (140, 120),
            "Applications": (500, 120)
        }' > dmg_settings.py

    - name: Build executable (Linux/Windows)
      if: matrix.os != 'macos-latest'
      shell: bash -l {0}
      run: |
        pyinstaller --onefile \
          --add-data "pyPairViz:pyPairViz" \
          --hidden-import tkinter \
          --hidden-import numpy \
          --hidden-import matplotlib \
          --runtime-hook ${{ matrix.runtime_hook }} \
          pyPairViz/main.py

    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: |
        pyinstaller --clean \
          --name "PyPairViz" \
          --windowed \
          --add-data "pyPairViz:pyPairViz" \
          --hidden-import tkinter \
          --hidden-import numpy \
          --hidden-import matplotlib \
          --runtime-hook ${{ matrix.runtime_hook }} \
          --osx-bundle-identifier "com.pypairviz.app" \
          pyPairViz/main.py
        dmgbuild -s dmg_settings.py "PyPairViz" dist/PyPairViz.dmg

    - name: Rename executable (Linux/Windows)
      if: matrix.os != 'macos-latest'
      shell: bash -l {0}
      run: |
        cd dist
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          mv main.exe pyPairViz-windows.exe
        else
          mv main pyPairViz-linux
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: pyPairViz-${{ matrix.os }}
        path: dist/*

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}