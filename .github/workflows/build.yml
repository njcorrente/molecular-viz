name: Build Executables

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: "3.9"
        channels: conda-forge,defaults
        activate-environment: pyPairViz

    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      shell: bash -l {0}
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx xvfb

    - name: Install Conda Dependencies
      shell: bash -l {0}
      run: |
        conda env update -f environment.yml
        conda install -c conda-forge pyinstaller

    - name: Build Executable
      shell: bash -l {0}
      run: |
        python build_executables.py

    - name: Prepare artifacts for Windows
      if: runner.os == 'Windows'
      shell: bash -l {0}
      run: |
        cd dist
        7z a pyPairViz-windows.zip pyPairViz.exe

    - name: Prepare artifacts for macOS
      if: runner.os == 'macOS'
      shell: bash -l {0}
      run: |
        cd dist
        zip -r pyPairViz-macos.zip pyPairViz.app

    - name: Prepare artifacts for Linux
      if: runner.os == 'Linux'
      shell: bash -l {0}
      run: |
        cd dist
        zip -r pyPairViz-linux.zip pyPairViz

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pyPairViz-${{ runner.os }}
        path: |
          dist/*.zip
        if-no-files-found: error

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
